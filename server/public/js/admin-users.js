document.addEventListener("DOMContentLoaded", async () => {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤
    const authToken = getAuthToken();
    if (!authToken) {
      redirectToLogin();
      return;
    }

    const currentUser = getCurrentUser();
    if (!currentUser || currentUser.role !== "admin") {
      showAccessDenied();
      return;
    }

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    initUI(currentUser);

    // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await Promise.all([loadUsers(authToken), loadGroups(authToken)]);

    // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    new AdminPanel(authToken, currentUser);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    showError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
  }
});

// ======================
// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ======================

function getAuthToken() {
  return (
    localStorage.getItem("token") ||
    document.cookie
      .split("; ")
      .find((row) => row.startsWith("token="))
      ?.split("=")[1]
  );
}

function getCurrentUser() {
  try {
    return JSON.parse(localStorage.getItem("user")) || null;
  } catch {
    return null;
  }
}

function redirectToLogin() {
  window.location.href = "/login.html";
}

function showAccessDenied() {
  alert("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
  document.querySelectorAll(".admin-only").forEach((el) => {
    el.style.display = "none";
  });
}

function initUI(user) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  document.querySelectorAll(".admin-only").forEach((el) => {
    el.style.display = user.role === "admin" ? "" : "none";
  });
}

// ======================
// –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// ======================

async function loadUsers(token) {
  try {
    const response = await fetch("/api/users", {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      credentials: "include",
    });

    if (!response.ok) {
      throw new Error(await getErrorMessage(response));
    }

    const users = await response.json();
    renderUsers(users);
    setupUserDeletionHandlers(token);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
  }
}

function renderUsers(users) {
  const tbody = document.getElementById("user-table-body");
  if (!tbody) return;

  tbody.innerHTML = users
    .map(
      (user) => `
    <tr>
      <td>${user.id}</td>
      <td>${user.username}</td>
      <td>${user.role}</td>
      <td>${user.group_name || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"}</td>
      <td>
        <button data-id="${user.id}" class="delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
      </td>
    </tr>
  `
    )
    .join("");
}

function setupUserDeletionHandlers(token) {
  document
    .getElementById("user-table-body")
    ?.addEventListener("click", async (e) => {
      if (!e.target.classList.contains("delete-btn")) return;

      const userId = e.target.dataset.id;
      if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}?`)) return;

      try {
        await deleteUser(userId, token);
        await loadUsers(token);
        showSuccess("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
      } catch (error) {
        showError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
      }
    });
}

async function deleteUser(userId, token) {
  const response = await fetch(`/api/users/${userId}`, {
    method: "DELETE",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    credentials: "include",
  });

  if (!response.ok) {
    throw new Error(await getErrorMessage(response));
  }
}

// ======================
// –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏
// ======================

async function loadGroups(token) {
  try {
    const response = await fetch("/api/groups", {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      credentials: "include",
    });

    if (!response.ok) {
      throw new Error(await getErrorMessage(response));
    }

    const groups = await response.json();
    renderGroupSelects(groups);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
    showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø: ${error.message}`);
  }
}

function renderGroupSelects(groups) {
  // –î–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const groupSelect = document.getElementById("group");
  if (groupSelect) {
    groupSelect.innerHTML =
      '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É</option>' +
      groups.map((g) => `<option value="${g.id}">${g.name}</option>`).join("");
  }

  // –î–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const regGroupSelect = document.getElementById("reg-group");
  if (regGroupSelect) {
    regGroupSelect.innerHTML =
      '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É</option>' +
      groups.map((g) => `<option value="${g.id}">${g.name}</option>`).join("");
  }
}

// ======================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ======================

async function getErrorMessage(response) {
  try {
    const error = await response.json();
    return error.message || error.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
  } catch {
    return response.statusText || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
  }
}

function showError(message) {
  alert(`–û—à–∏–±–∫–∞: ${message}`);
  console.error(message);
}

function showSuccess(message) {
  console.log(message);
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π toast –≤–º–µ—Å—Ç–æ alert
  alert(message);
}

// ======================
// –ö–ª–∞—Å—Å AdminPanel
// ======================

class AdminPanel {
  constructor(token, currentUser) {
    this.token = token;
    this.currentUser = currentUser;
    this.initModal();
    this.setupEventListeners();
  }

  initModal() {
    const modalHTML = `
      <div class="modal" id="groups-modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</h3>
          <div class="groups-controls">
            <input type="text" id="new-group-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã">
            <button id="create-group-btn" class="btn-primary">–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É</button>
          </div>
          <div id="groups-container" class="groups-list"></div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML("beforeend", modalHTML);
    this.modal = document.getElementById("groups-modal");
    this.setupModalEvents();
  }

  setupModalEvents() {
    document
      .querySelector("#groups-modal .close")
      .addEventListener("click", () => this.closeModal());
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && this.modal.classList.contains("active")) {
        this.closeModal();
      }
    });
  }

  setupEventListeners() {
    document
      .getElementById("manage-groups-btn")
      ?.addEventListener("click", () => this.openModal());

    document
      .getElementById("create-group-btn")
      ?.addEventListener("click", async () => {
        await this.handleCreateGroup();
      });

    document
      .getElementById("user-form")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handleUserFormSubmit();
      });
  }

  async openModal() {
    this.modal.classList.add("active");
    try {
      await this.loadGroups();
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø: ${error.message}`);
    }
  }

  closeModal() {
    this.modal.classList.remove("active");
  }

  async loadGroups() {
    const response = await fetch("/api/groups", {
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json",
      },
      credentials: "include",
    });

    if (!response.ok) {
      throw new Error(await getErrorMessage(response));
    }

    const groups = await response.json();
    this.renderGroups(groups);
  }

  renderGroups(groups) {
    const container = document.getElementById("groups-container");
    if (!container) return;

    container.innerHTML = groups
      .map(
        (group) => `
      <div class="group-item" data-id="${group.id}">
        <span>${group.name}</span>
        <button class="delete-group-btn">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    `
      )
      .join("");

    container.querySelectorAll(".delete-group-btn").forEach((btn) => {
      btn.addEventListener("click", async () => {
        const groupId = btn.closest(".group-item").dataset.id;
        await this.handleDeleteGroup(groupId);
      });
    });
  }

  async handleCreateGroup() {
    const nameInput = document.getElementById("new-group-name");
    const name = nameInput.value.trim();

    if (!name) {
      showError("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
      return;
    }

    try {
      const response = await fetch("/api/groups", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.token}`,
        },
        body: JSON.stringify({ name }),
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error(await getErrorMessage(response));
      }

      nameInput.value = "";
      await this.loadGroups();
      await loadGroups(this.token); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã
      showSuccess("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: ${error.message}`);
    }
  }

  async handleDeleteGroup(groupId) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É ${groupId}?`)) return;

    try {
      const response = await fetch(`/api/groups/${groupId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${this.token}`,
          "Content-Type": "application/json",
        },
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error(await getErrorMessage(response));
      }

      await this.loadGroups();
      await loadGroups(this.token); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã
      showSuccess("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: ${error.message}`);
    }
  }

  async handleUserFormSubmit() {
    const form = document.getElementById("user-form");
    const formData = new FormData(form);
    const data = {
      username: formData.get("username").trim(),
      password: formData.get("password"),
      role: formData.get("role"),
      group_id:
        formData.get("role") === "student" ? formData.get("group") : null,
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!data.username || !data.password) {
      showError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å");
      return;
    }

    if (data.role === "student" && !data.group_id) {
      showError("–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É");
      return;
    }

    try {
      const response = await fetch("/api/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.token}`,
        },
        body: JSON.stringify(data),
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error(await getErrorMessage(response));
      }

      form.reset();
      await loadUsers(this.token);
      showSuccess("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }
  }
}
