const path = require("path");
require("dotenv").config({ path: path.join(__dirname, "/.env") });

const express = require("express");
const mysql = require("mysql2/promise");
const cors = require("cors");
const helmet = require("helmet");
const morgan = require("morgan");
const cookieParser = require("cookie-parser");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const fs = require("fs");
const testsRouter = require("./routes/tests");

const app = express();
const PORT = process.env.PORT || 3000;

// ======================
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// ======================
const dbConfig = {
  host: process.env.MYSQLHOST || "mysql.railway.internal",
  user: process.env.MYSQLUSER || "root",
  password: process.env.MYSQLPASSWORD || "RQktuLMxfeDeonoGKqTqykWLpPcBUnlo",
  database: process.env.MYSQLDATABASE || "railway",
  port: parseInt(process.env.MYSQLPORT) || 3306,
  ssl:
    process.env.NODE_ENV === "production"
      ? {
          rejectUnauthorized: false,
          minVersion: "TLSv1.2",
        }
      : null,
  waitForConnections: true,
  connectionLimit: 10,
  connectTimeout: 10000,
  flags: ["-FOUND_ROWS"],
};

console.log("–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î:", {
  ...dbConfig,
  password: "***", // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
});
const db = mysql.createPool(dbConfig);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:", {
  environment: process.env.NODE_ENV || "development",
  port: PORT,
  database: {
    host: dbConfig.host,
    name: dbConfig.database,
    port: dbConfig.port,
  },
});

// ======================
// Middleware
// ======================
app.use(helmet());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(morgan(process.env.NODE_ENV === "production" ? "combined" : "dev"));
app.use(express.static(path.join(__dirname, "public")));
app.use(
  cors({
    origin: ["http://localhost:3000", "https://testforge1.up.railway.app"],
    credentials: true,
    methods: ["GET", "POST", "PUT", "DELETE"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);

// ======================
// –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// ======================
const migrations = [
  {
    name: "01-initial-schema.sql",
    sql: `
      -- 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥—Ä—É–ø–ø (–Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
      CREATE TABLE IF NOT EXISTS user_groups (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      -- 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
      INSERT IGNORE INTO user_groups (id, name) VALUES 
        (1, '–ì—Ä—É–ø–ø–∞ –ö'),
        (2, '–ì—Ä—É–ø–ø–∞ –ó');
      
      -- 3. –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç user_groups)
      CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(255) NOT NULL,
        password VARCHAR(255) NOT NULL,
        role ENUM('student', 'teacher', 'admin') NOT NULL DEFAULT 'student',
        group_id INT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (group_id) REFERENCES user_groups(id) ON DELETE SET NULL,
        UNIQUE KEY unique_user_per_group (username, group_id)
      ) ENGINE=InnoDB;
      
      -- 4. –¢–∞–±–ª–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç users)
      CREATE TABLE IF NOT EXISTS tests (
        id INT AUTO_INCREMENT PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        author_id INT NOT NULL,
        available_to_all BOOLEAN DEFAULT FALSE,
        passing_score INT DEFAULT NULL,
        can_retake BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE
      ) ENGINE=InnoDB;
      
      -- 5. –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç tests)
      CREATE TABLE IF NOT EXISTS questions (
        id INT AUTO_INCREMENT PRIMARY KEY,
        test_id INT NOT NULL,
        text TEXT NOT NULL,
        question_type ENUM('single', 'multiple', 'text') NOT NULL DEFAULT 'single',
        correct_text_answer TEXT NULL,
        FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE
      ) ENGINE=InnoDB;
      
      -- 6. –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç questions)
      CREATE TABLE IF NOT EXISTS answers (
        id INT AUTO_INCREMENT PRIMARY KEY,
        question_id INT NOT NULL,
        text TEXT NOT NULL,
        is_correct BOOLEAN NOT NULL DEFAULT FALSE,
        FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
      ) ENGINE=InnoDB;
      
      -- 7. –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ø—ã—Ç–æ–∫ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç users –∏ tests)
      CREATE TABLE IF NOT EXISTS test_attempts (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        test_id INT NOT NULL,
        started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP NULL,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE
      ) ENGINE=InnoDB;
      
      -- 8. –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç test_attempts, questions, answers)
      CREATE TABLE IF NOT EXISTS student_answers (
        id INT AUTO_INCREMENT PRIMARY KEY,
        attempt_id INT NOT NULL,
        question_id INT NOT NULL,
        answer_id INT NULL,
        text_answer TEXT NULL,
        answered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (attempt_id) REFERENCES test_attempts(id) ON DELETE CASCADE,
        FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
        FOREIGN KEY (answer_id) REFERENCES answers(id) ON DELETE SET NULL
      ) ENGINE=InnoDB;
      
      -- 9. –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç users –∏ tests)
      CREATE TABLE IF NOT EXISTS test_results (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        test_id INT NOT NULL,
        score INT NOT NULL,
        total_questions INT NOT NULL,
        completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE
      ) ENGINE=InnoDB;
      
      -- 10. –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç tests –∏ user_groups)
      CREATE TABLE IF NOT EXISTS test_groups (
        test_id INT NOT NULL,
        group_id INT NOT NULL,
        PRIMARY KEY (test_id, group_id),
        FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE,
        FOREIGN KEY (group_id) REFERENCES user_groups(id) ON DELETE CASCADE
      ) ENGINE=InnoDB;

      -- 11. –¢–∞–±–ª–∏—Ü–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø
CREATE TABLE IF NOT EXISTS test_exclusions (
  test_id INT NOT NULL,
  group_id INT NOT NULL,
  PRIMARY KEY (test_id, group_id),
  FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE,
  FOREIGN KEY (group_id) REFERENCES user_groups(id) ON DELETE CASCADE
      ) ENGINE=InnoDB;
    `,
  },
];

async function runMigrations() {
  const connection = await db.getConnection();
  try {
    console.log("üõ† –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...");

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
    await connection.query("SET FOREIGN_KEY_CHECKS = 0");

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await connection.query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB
    `);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const [executedMigrations] = await connection.query(
      "SELECT name FROM migrations"
    );
    const executedNames = new Set(executedMigrations.map((m) => m.name));

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    for (const migration of migrations) {
      if (!executedNames.has(migration.name)) {
        console.log(`üî® –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é: ${migration.name}`);

        try {
          // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
          const statements = migration.sql
            .split(";")
            .map((s) => s.trim())
            .filter((s) => s.length > 0);

          for (const statement of statements) {
            if (statement) {
              await connection.query(statement);
            }
          }

          // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
          await connection.query("INSERT INTO migrations (name) VALUES (?)", [
            migration.name,
          ]);
          console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.name}:`, err);
          throw err;
        }
      }
    }

    // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –æ–±—Ä–∞—Ç–Ω–æ
    await connection.query("SET FOREIGN_KEY_CHECKS = 1");
    console.log("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
  } catch (err) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:", err);
    throw err;
  } finally {
    connection.release();
  }
}

// ======================
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
// ======================
const checkDBConnection = async () => {
  console.log("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", dbConfig);

  let conn;
  try {
    conn = await mysql.createConnection(dbConfig); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await conn.query("SELECT 1");
    console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞");
  } catch (err) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", {
      message: err.message,
      code: err.code,
      config: dbConfig,
      stack: err.stack,
    });
    process.exit(1);
  } finally {
    if (conn) await conn.end();
  }
};

async function debugDatabase() {
  const conn = await db.getConnection();
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const [tables] = await conn.query(
      `
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = ?
    `,
      [dbConfig.database]
    );
    console.log(
      "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:",
      tables.map((t) => t.table_name)
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É migrations
    const [migs] = await conn.query("SELECT * FROM migrations");
    console.log("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:", migs);
  } finally {
    conn.release();
  }
}

async function checkTables() {
  try {
    console.log("üõ† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...");
    await runMigrations();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const [tables] = await db.query(
      `
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = ? 
        AND table_name IN ('users', 'tests', 'questions', 'answers')
    `,
      [dbConfig.database]
    );

    const missingTables = ["users", "tests", "questions", "answers"].filter(
      (t) => !tables.some((x) => x.table_name === t)
    );

    if (missingTables.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(", ")}`);
    }

    console.log("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
  } catch (err) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:", err);
    throw err;
  }
}

// ======================
// Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// ======================
const authenticate = async (req, res, next) => {
  const publicRoutes = [
    "/api/auth",
    "/api/auth/login",
    "/api/auth/register",
    "/api/health",
  ];

  if (publicRoutes.some((route) => req.path.startsWith(route))) {
    return next();
  }

  try {
    const token =
      req.cookies?.token || req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const [users] = await db.query(
      `SELECT id, username, role, group_id, is_active FROM users WHERE id = ?`,
      [decoded.userId]
    );

    if (!users[0]?.is_active) {
      return res
        .status(401)
        .json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" });
    }

    req.user = users[0];
    next();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", err.message);
    if (err.name === "JsonWebTokenError") {
      return res.status(401).json({ error: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    }
    if (err.name === "TokenExpiredError") {
      return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫" });
    }
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
  }
};

// ======================
// –†–æ—É—Ç—ã API
// ======================

// Health check
app.get("/api/health", async (req, res) => {
  try {
    await db.query("SELECT 1");
    res.json({
      status: "OK",
      timestamp: new Date().toISOString(),
      database: dbConfig.database,
      dbStatus: "connected",
    });
  } catch (err) {
    res.status(500).json({
      status: "ERROR",
      error: err.message,
      dbStatus: "disconnected",
    });
  }
});

// Auth routes
app.post("/api/auth/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    if (!username || !password) {
      return res.status(400).json({ error: "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const [users] = await db.query(
      "SELECT id, username, password, role, group_id, is_active FROM users WHERE username = ?",
      [username]
    );

    if (users.length === 0) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", username);
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    const user = users[0];
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", user.username);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    if (!user.is_active) {
      return res.status(401).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" });
    }

    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", username);
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ JWT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.username);
    const token = jwt.sign(
      { userId: user.id, username: user.username, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "8h" }
    );

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res
      .cookie("token", token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        maxAge: 8 * 60 * 60 * 1000, // 8 —á–∞—Å–æ–≤
      })
      .json({
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
          group_id: user.group_id,
        },
      });
  } catch (error) {
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞:", {
      error: error.message,
      stack: error.stack,
      body: req.body,
    });

    res.status(500).json({
      error: "login_failed",
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    });
  }
});

app.post("/api/auth/register", async (req, res) => {
  const connection = await db.getConnection();
  try {
    await connection.beginTransaction();

    let { username, password, role = "student", group_id } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: "–§–ò –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –§–ò –∫ —Ñ–æ—Ä–º–∞—Ç—É: –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
    const normalizeFullName = (name) =>
      name
        .toLowerCase()
        .trim()
        .replace(/(?:^|\s|-)[–∞-—è—ë]/g, (letter) => letter.toUpperCase());

    username = normalizeFullName(username);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    const validUsernameRegex = /^[–ê-–Ø–∞-—è–Å—ë\- ]+$/;
    const capitalLetters = username.match(/[–ê-–Ø–Å]/g) || [];

    if (!validUsernameRegex.test(username)) {
      return res.status(400).json({
        error: "–§–ò –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã",
      });
    }

    if (capitalLetters.length < 2) {
      return res.status(400).json({
        error:
          "–§–ò –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if (!["student", "teacher", "admin"].includes(role)) {
      return res.status(400).json({ error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }

    if (role === "student" && !group_id) {
      return res.status(400).json({
        error: "–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    if (group_id) {
      const [group] = await connection.query(
        "SELECT id FROM user_groups WHERE id = ?",
        [group_id]
      );
      if (group.length === 0) {
        return res.status(400).json({
          error: "–£–∫–∞–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –∏ –≥—Ä—É–ø–ø–µ
    const [existing] = await connection.query(
      "SELECT id FROM users WHERE username = ? AND group_id <=> ?",
      [username, role === "student" ? group_id : null]
    );
    if (existing.length > 0) {
      return res.status(400).json({
        error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ",
      });
    }

    const hashedPassword = await bcrypt.hash(password, 12);
    const [result] = await connection.query(
      "INSERT INTO users (username, password, role, group_id, is_active) VALUES (?, ?, ?, ?, 1)",
      [username, hashedPassword, role, role === "student" ? group_id : null]
    );

    await connection.commit();

    res.status(201).json({
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
      userId: result.insertId,
    });
  } catch (error) {
    await connection.rollback();
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      ...(process.env.NODE_ENV === "development" && { details: error.message }),
    });
  } finally {
    connection.release();
  }
});

app.get("/api/users/:id", authenticate, async (req, res) => {
  try {
    const userId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== "admin" && req.user.id !== parseInt(userId)) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
    }

    const [users] = await db.query(
      `SELECT id, username, role, group_id 
       FROM users WHERE id = ?`,
      [userId]
    );

    if (users.length === 0) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const user = users[0];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (user.group_id) {
      const [groups] = await db.query(
        "SELECT id, name FROM user_groups WHERE id = ?",
        [user.group_id]
      );
      user.group = groups[0];
    }

    res.json(user);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.use("/api/tests", authenticate, testsRouter);

// ======================
// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã
// ======================
app.use(authenticate);

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.get("/api/profile", (req, res) => {
  res.json({ user: req.user });
});

app.get("/api/users", async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
    }

    const [users] = await db.query(`
      SELECT u.id, u.username, u.role, g.name as group_name, u.is_active 
      FROM users u
      LEFT JOIN user_groups g ON u.group_id = g.id
    `);
    res.json(users);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.delete("/api/users/:id", async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
    }

    const userId = req.params.id;
    const [rows] = await db.query("SELECT id FROM users WHERE id = ?", [
      userId,
    ]);
    if (rows.length === 0) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    await db.query("DELETE FROM users WHERE id = ?", [userId]);
    res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/groups", async (req, res) => {
  try {
    const [groups] = await db.query("SELECT id, name FROM user_groups");
    res.json(groups);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ======================
// –ì—Ä—É–ø–ø—ã (–¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞)
// ======================

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
app.post("/api/groups", authenticate, async (req, res) => {
  if (req.user.role !== "admin") {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
  }

  try {
    const { name } = req.body;
    if (!name) {
      return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }

    const [result] = await db.query(
      "INSERT INTO user_groups (name) VALUES (?)",
      [name]
    );

    res.status(201).json({
      id: result.insertId,
      name,
      message: "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
app.delete("/api/groups/:id", authenticate, async (req, res) => {
  if (req.user.role !== "admin") {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
  }

  try {
    const groupId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
    const [students] = await db.query(
      "SELECT id FROM users WHERE group_id = ? LIMIT 1",
      [groupId]
    );

    if (students.length > 0) {
      return res.status(400).json({
        error: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏",
      });
    }

    const [result] = await db.query("DELETE FROM user_groups WHERE id = ?", [
      groupId,
    ]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json({ message: "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ======================
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ======================
async function startServer() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await checkDBConnection();
    await debugDatabase();
    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
    await checkTables();

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const server = app.listen(PORT, "0.0.0.0", () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbConfig.host}/${dbConfig.database}`);
    });

    process.on("SIGTERM", () => {
      console.log("üõë –ü–æ–ª—É—á–µ–Ω SIGTERM. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
      server.close(() => {
        db.end();
        process.exit(0);
      });
    });
  } catch (err) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:", err);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
startServer();
